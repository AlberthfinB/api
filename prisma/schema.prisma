// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  email        String        @unique
  role_id      Int
  role         Role          @relation(fields: [role_id], references: [id])
  referal_code String        @unique
  points       Int           @default(0)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  events       Event[]
  transactions Transaction[]
  reviews      Review[]
  referred     Referral[]    @relation("ReferrerRelation") //relasi user yang kasih referal jadi ke referrer_id
  referrals    Referral[]    @relation("RefereeRelation") //relasi user yang pakai kode referalnya jadi ke referee_id
  user_points  User_Point[]
  Coupon       Coupon[]
}

model Referral {
  id           Int      @id @default(autoincrement())
  referrer_id  Int //ID user yang kasih referal
  referee_id   Int //ID user yang pakai referalnya
  referee_role String   @default("attendee")
  points       Int      @default(10000)
  expiry_date  DateTime
  created_at   DateTime @default(now())
  referrer     User     @relation("ReferrerRelation", fields: [referrer_id], references: [id])
  referee      User     @relation("RefereeRelation", fields: [referee_id], references: [id])
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model User_Point {
  id          Int      @id @default(autoincrement())
  user_id     Int
  points      Int
  expiry_date DateTime
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
}

model Event {
  id              Int                  @id @default(autoincrement())
  name            String               @db.VarChar(225)
  location        String               @db.VarChar(225)
  description     String
  image_url       String?
  date            DateTime
  time            String
  category_id     Int
  category        Event_category       @relation(fields: [category_id], references: [id])
  seats           Int
  available_seats Int
  ticket_price    Float                @default(0.0)
  ticket_id       Int
  ticket          Ticket               @relation(fields: [ticket_id], references: [id])
  status_id       Int
  status          Event_status         @relation(fields: [status_id], references: [id])
  organizer_id    Int
  organizer       User                 @relation(fields: [organizer_id], references: [id])
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  reviews         Review[]
  promotions      Promotion[]
  transactions    Transaction_detail[]
}

model Ticket {
  id                 Int                  @id @default(autoincrement())
  ticket_type        String               @unique
  events             Event[]
  Transaction_detail Transaction_detail[]
}

model Event_status {
  id          Int      @id @default(autoincrement())
  status_name String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  events      Event[]
}

model Event_category {
  id            Int      @id @default(autoincrement())
  category_name String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  events        Event[]
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  event_id   Int
  event      Event    @relation(fields: [event_id], references: [id])
  rating     Int
  comment    String
  created_at DateTime @default(now())
}

model Promotion {
  id          Int      @id @default(autoincrement())
  event_id    Int
  event       Event    @relation(fields: [event_id], references: [id])
  type        String
  discount    Float
  max_uses    Int      @default(0)
  valid_until DateTime
}

model Transaction {
  id                  Int                  @id @default(autoincrement())
  user_id             Int
  user                User                 @relation(fields: [user_id], references: [id])
  total_price         Float //untuk harga total (setelah diskon atau beli banyak tiket)
  discount            Float                @default(0.0)
  points_used         Int                  @default(0)
  coupon_id           Int?
  coupon              Coupon?              @relation(fields: [coupon_id], references: [id])
  payment_status_id   Int
  payment_status      Payment_status       @relation(fields: [payment_status_id], references: [id])
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  transaction_details Transaction_detail[]
}

model Transaction_detail {
  id             Int         @id @default(autoincrement())
  transaction_id Int
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  event_id       Int
  event          Event       @relation(fields: [event_id], references: [id])
  ticket_id      Int
  ticket         Ticket      @relation(fields: [ticket_id], references: [id])
  quantity       Int
  price          Float //untuk informasi harga per ticket (satuan)
  discount       Float       @default(0.0) // Diskon dari promosi event
}

model Payment_status {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions Transaction[]
}

model Coupon {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  discount    Float
  max_uses    Int           @default(1)
  used_count  Int           @default(0)
  user_id     Int?
  user        User?         @relation(fields: [user_id], references: [id])
  valid_from  DateTime
  valid_until DateTime
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
}
