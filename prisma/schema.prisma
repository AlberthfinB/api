// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      Int           @id @default(autoincrement())
  name         String        @db.VarChar(45)
  password     String
  email        String        @unique
  referal_code String?       @unique
  role_id      Int
  role         Role          @relation(fields: [role_id], references: [role_id])
  points       Int           @default(0)
  isVerified   Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  event        Event[]
  transactions Transaction[]
  user_points  User_Point[]
  referred     Referral[]    @relation("ReferrerRelation") //relasi user yang kasih referal jadi ke referrer_id
  referrals    Referral[]    @relation("RefereeRelation") //relasi user yang pakai kode referalnya jadi ke referee_id
  Coupon       Coupon[]
}

model Referral {
  id           Int      @id @default(autoincrement())
  referrer_id  Int //ID user yang kasih referal
  referee_id   Int //ID user yang pakai referalnya
  referee_role String   @default("attendee")
  points       Int      @default(10000)
  expiry_date  DateTime
  created_at   DateTime @default(now())
  referrer     User     @relation("ReferrerRelation", fields: [referrer_id], references: [user_id])
  referee      User     @relation("RefereeRelation", fields: [referee_id], references: [user_id])
}

model Role {
  role_id   Int    @id @default(autoincrement())
  role_name String @unique
  user      User[]
}

model User_Point {
  id          Int      @id @default(autoincrement())
  user_id     Int
  points      Int
  expiry_date DateTime
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id])
}

model Status_Event {
  status_event_id Int     @id @default(autoincrement())
  status_name     String  @unique
  event           Event[]
}

model Event {
  event_id          Int            @id @default(autoincrement())
  name_event        String         @db.VarChar(225)
  location          String         @db.VarChar(225)
  description       String         @db.VarChar(1000)
  image_event       String
  ticket_price      Decimal        @db.Decimal(18, 2)
  seats             Int
  available_seats   Int
  create_date       DateTime       @default(now())
  event_expired     DateTime
  user_id           Int
  user              User           @relation(fields: [user_id], references: [user_id])
  ticket_id         Int
  ticket_type       Ticket_Type    @relation(fields: [ticket_id], references: [ticket_id])
  event_category_id Int
  event_category    Event_Category @relation(fields: [event_category_id], references: [event_category_id])
  promotion_type_id Int
  promotion_type    Promotion_Type @relation(fields: [promotion_type_id], references: [promotion_type_id])
  Promotion         Promotion[]
  status_event_id   Int
  status_event      Status_Event   @relation(fields: [status_event_id], references: [status_event_id])
  Transaction       Transaction[]
}

model Ticket_Type {
  ticket_id   Int           @id @default(autoincrement())
  ticket_type String        @unique
  created_at  DateTime      @default(now())
  event       Event[]
  Transaction Transaction[]
}

model Event_Category {
  event_category_id   Int     @id @default(autoincrement())
  event_category_name String  @unique
  event               Event[]
}

model Promotion {
  id                Int            @id @default(autoincrement())
  event_id          Int
  event             Event          @relation(fields: [event_id], references: [event_id])
  promotion_type_id Int
  promotion_type    Promotion_Type @relation(fields: [promotion_type_id], references: [promotion_type_id])
  discount          Float
  max_uses          Int            @default(0)
  valid_until       DateTime
}

model Promotion_Type {
  promotion_type_id Int         @id @default(autoincrement())
  promotion_type    String      @unique
  Promotion         Promotion[]
  event             Event[]
}

model Transaction {
  id                Int            @id @default(autoincrement())
  user_id           Int
  user              User           @relation(fields: [user_id], references: [user_id])
  total_price       Float //untuk harga total (setelah diskon atau beli banyak tiket)
  discount          Float          @default(0.0)
  points_used       Int            @default(0)
  coupon_id         Int?
  coupon            Coupon?        @relation(fields: [coupon_id], references: [id])
  payment_status_id Int
  payment_status    Payment_status @relation(fields: [payment_status_id], references: [id])
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  payment_proof     String?
  review            String?
  event_id          Int
  event             Event          @relation(fields: [event_id], references: [event_id])
  ticket_id         Int
  ticket            Ticket_Type    @relation(fields: [ticket_id], references: [ticket_id])
  quantity          Int
  price             Float //untuk informasi harga per ticket (satuan)
  discount_event    Float          @default(0.0) // Diskon dari promosi event
}

model Payment_status {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions Transaction[]
}

model Coupon {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  discount    Float
  max_uses    Int           @default(1)
  used_count  Int           @default(0)
  user_id     Int?
  user        User?         @relation(fields: [user_id], references: [user_id])
  valid_from  DateTime
  valid_until DateTime
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
}
